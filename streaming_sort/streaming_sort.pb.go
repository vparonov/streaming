// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streaming_sort.proto

/*
Package streamin_sort is a generated protocol buffer package.

It is generated from these files:
	streaming_sort.proto

It has these top-level messages:
	PutDataRequest
	PutDataRequest2
	PutDataResponse
	EndStreamResponse
	GetDataResponse
	StreamGuid
	Empty
*/
package streamin_sort

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutDataRequest struct {
	StreamID *StreamGuid `protobuf:"bytes,1,opt,name=streamID" json:"streamID,omitempty"`
	Data     []string    `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *PutDataRequest) Reset()                    { *m = PutDataRequest{} }
func (m *PutDataRequest) String() string            { return proto.CompactTextString(m) }
func (*PutDataRequest) ProtoMessage()               {}
func (*PutDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutDataRequest) GetStreamID() *StreamGuid {
	if m != nil {
		return m.StreamID
	}
	return nil
}

func (m *PutDataRequest) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutDataRequest2 struct {
	StreamID string   `protobuf:"bytes,1,opt,name=streamID" json:"streamID,omitempty"`
	Data     []string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *PutDataRequest2) Reset()                    { *m = PutDataRequest2{} }
func (m *PutDataRequest2) String() string            { return proto.CompactTextString(m) }
func (*PutDataRequest2) ProtoMessage()               {}
func (*PutDataRequest2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutDataRequest2) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *PutDataRequest2) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutDataResponse struct {
}

func (m *PutDataResponse) Reset()                    { *m = PutDataResponse{} }
func (m *PutDataResponse) String() string            { return proto.CompactTextString(m) }
func (*PutDataResponse) ProtoMessage()               {}
func (*PutDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EndStreamResponse struct {
}

func (m *EndStreamResponse) Reset()                    { *m = EndStreamResponse{} }
func (m *EndStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*EndStreamResponse) ProtoMessage()               {}
func (*EndStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetDataResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetDataResponse) Reset()                    { *m = GetDataResponse{} }
func (m *GetDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataResponse) ProtoMessage()               {}
func (*GetDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetDataResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type StreamGuid struct {
	Guid string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
}

func (m *StreamGuid) Reset()                    { *m = StreamGuid{} }
func (m *StreamGuid) String() string            { return proto.CompactTextString(m) }
func (*StreamGuid) ProtoMessage()               {}
func (*StreamGuid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamGuid) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*PutDataRequest)(nil), "streamin_sort.PutDataRequest")
	proto.RegisterType((*PutDataRequest2)(nil), "streamin_sort.PutDataRequest2")
	proto.RegisterType((*PutDataResponse)(nil), "streamin_sort.PutDataResponse")
	proto.RegisterType((*EndStreamResponse)(nil), "streamin_sort.EndStreamResponse")
	proto.RegisterType((*GetDataResponse)(nil), "streamin_sort.GetDataResponse")
	proto.RegisterType((*StreamGuid)(nil), "streamin_sort.StreamGuid")
	proto.RegisterType((*Empty)(nil), "streamin_sort.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamingSort service

type StreamingSortClient interface {
	BeginStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StreamGuid, error)
	PutStreamData(ctx context.Context, in *PutDataRequest, opts ...grpc.CallOption) (*PutDataResponse, error)
	GetSortedStream(ctx context.Context, in *StreamGuid, opts ...grpc.CallOption) (StreamingSort_GetSortedStreamClient, error)
	EndStream(ctx context.Context, in *StreamGuid, opts ...grpc.CallOption) (*EndStreamResponse, error)
	PutStreamData2(ctx context.Context, opts ...grpc.CallOption) (StreamingSort_PutStreamData2Client, error)
}

type streamingSortClient struct {
	cc *grpc.ClientConn
}

func NewStreamingSortClient(cc *grpc.ClientConn) StreamingSortClient {
	return &streamingSortClient{cc}
}

func (c *streamingSortClient) BeginStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StreamGuid, error) {
	out := new(StreamGuid)
	err := grpc.Invoke(ctx, "/streamin_sort.StreamingSort/BeginStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingSortClient) PutStreamData(ctx context.Context, in *PutDataRequest, opts ...grpc.CallOption) (*PutDataResponse, error) {
	out := new(PutDataResponse)
	err := grpc.Invoke(ctx, "/streamin_sort.StreamingSort/PutStreamData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingSortClient) GetSortedStream(ctx context.Context, in *StreamGuid, opts ...grpc.CallOption) (StreamingSort_GetSortedStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamingSort_serviceDesc.Streams[0], c.cc, "/streamin_sort.StreamingSort/GetSortedStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingSortGetSortedStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingSort_GetSortedStreamClient interface {
	Recv() (*GetDataResponse, error)
	grpc.ClientStream
}

type streamingSortGetSortedStreamClient struct {
	grpc.ClientStream
}

func (x *streamingSortGetSortedStreamClient) Recv() (*GetDataResponse, error) {
	m := new(GetDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingSortClient) EndStream(ctx context.Context, in *StreamGuid, opts ...grpc.CallOption) (*EndStreamResponse, error) {
	out := new(EndStreamResponse)
	err := grpc.Invoke(ctx, "/streamin_sort.StreamingSort/EndStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingSortClient) PutStreamData2(ctx context.Context, opts ...grpc.CallOption) (StreamingSort_PutStreamData2Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamingSort_serviceDesc.Streams[1], c.cc, "/streamin_sort.StreamingSort/PutStreamData2", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingSortPutStreamData2Client{stream}
	return x, nil
}

type StreamingSort_PutStreamData2Client interface {
	Send(*PutDataRequest2) error
	CloseAndRecv() (*PutDataResponse, error)
	grpc.ClientStream
}

type streamingSortPutStreamData2Client struct {
	grpc.ClientStream
}

func (x *streamingSortPutStreamData2Client) Send(m *PutDataRequest2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingSortPutStreamData2Client) CloseAndRecv() (*PutDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamingSort service

type StreamingSortServer interface {
	BeginStream(context.Context, *Empty) (*StreamGuid, error)
	PutStreamData(context.Context, *PutDataRequest) (*PutDataResponse, error)
	GetSortedStream(*StreamGuid, StreamingSort_GetSortedStreamServer) error
	EndStream(context.Context, *StreamGuid) (*EndStreamResponse, error)
	PutStreamData2(StreamingSort_PutStreamData2Server) error
}

func RegisterStreamingSortServer(s *grpc.Server, srv StreamingSortServer) {
	s.RegisterService(&_StreamingSort_serviceDesc, srv)
}

func _StreamingSort_BeginStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingSortServer).BeginStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamin_sort.StreamingSort/BeginStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingSortServer).BeginStream(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingSort_PutStreamData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingSortServer).PutStreamData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamin_sort.StreamingSort/PutStreamData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingSortServer).PutStreamData(ctx, req.(*PutDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingSort_GetSortedStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGuid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingSortServer).GetSortedStream(m, &streamingSortGetSortedStreamServer{stream})
}

type StreamingSort_GetSortedStreamServer interface {
	Send(*GetDataResponse) error
	grpc.ServerStream
}

type streamingSortGetSortedStreamServer struct {
	grpc.ServerStream
}

func (x *streamingSortGetSortedStreamServer) Send(m *GetDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingSort_EndStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamGuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingSortServer).EndStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamin_sort.StreamingSort/EndStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingSortServer).EndStream(ctx, req.(*StreamGuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingSort_PutStreamData2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingSortServer).PutStreamData2(&streamingSortPutStreamData2Server{stream})
}

type StreamingSort_PutStreamData2Server interface {
	SendAndClose(*PutDataResponse) error
	Recv() (*PutDataRequest2, error)
	grpc.ServerStream
}

type streamingSortPutStreamData2Server struct {
	grpc.ServerStream
}

func (x *streamingSortPutStreamData2Server) SendAndClose(m *PutDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingSortPutStreamData2Server) Recv() (*PutDataRequest2, error) {
	m := new(PutDataRequest2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamingSort_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamin_sort.StreamingSort",
	HandlerType: (*StreamingSortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginStream",
			Handler:    _StreamingSort_BeginStream_Handler,
		},
		{
			MethodName: "PutStreamData",
			Handler:    _StreamingSort_PutStreamData_Handler,
		},
		{
			MethodName: "EndStream",
			Handler:    _StreamingSort_EndStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSortedStream",
			Handler:       _StreamingSort_GetSortedStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStreamData2",
			Handler:       _StreamingSort_PutStreamData2_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streaming_sort.proto",
}

func init() { proto.RegisterFile("streaming_sort.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xa4, 0xe2, 0x17, 0x8f, 0x20, 0xe1, 0xc9, 0x01, 0x31, 0x92, 0xa6, 0x89, 0x09, 0xa7, 0x86,
	0xd4, 0x78, 0x57, 0x02, 0x21, 0x7a, 0x6a, 0x8a, 0x37, 0x0f, 0xa6, 0xda, 0x97, 0xa6, 0x89, 0x74,
	0x6b, 0x77, 0x37, 0xd1, 0x5f, 0xe2, 0xdf, 0x35, 0xbb, 0x0b, 0xc5, 0x96, 0x14, 0x6e, 0xaf, 0xd3,
	0xd9, 0xd9, 0x99, 0xd9, 0x07, 0x7d, 0x2e, 0x72, 0x0a, 0x57, 0x49, 0x1a, 0xbf, 0x71, 0x96, 0x0b,
	0x37, 0xcb, 0x99, 0x60, 0xd8, 0xd9, 0xa0, 0x1a, 0x74, 0x5e, 0xe1, 0xc2, 0x97, 0x62, 0x16, 0x8a,
	0x30, 0xa0, 0x2f, 0x49, 0x5c, 0xe0, 0x3d, 0x9c, 0x1b, 0xca, 0xd3, 0x6c, 0x60, 0xd9, 0xd6, 0xb8,
	0xed, 0x5d, 0xb9, 0xa5, 0x33, 0xee, 0x52, 0x7f, 0x2d, 0x64, 0x12, 0x05, 0x05, 0x15, 0x11, 0x8e,
	0xa3, 0x50, 0x84, 0x83, 0x23, 0xbb, 0x39, 0x6e, 0x05, 0x7a, 0x76, 0x1e, 0xa1, 0x5b, 0x16, 0xf7,
	0x70, 0x58, 0x51, 0x6f, 0x1d, 0x90, 0xe8, 0xfd, 0x93, 0xe0, 0x19, 0x4b, 0x39, 0x39, 0x97, 0xd0,
	0x9b, 0xa7, 0x91, 0x31, 0x51, 0x80, 0xb7, 0xd0, 0x5d, 0x50, 0x89, 0x57, 0xc8, 0x99, 0x6b, 0x8c,
	0x9c, 0x0d, 0xb0, 0x75, 0xaf, 0x18, 0xb1, 0x4c, 0xa2, 0x0d, 0x43, 0xcd, 0xce, 0x19, 0x9c, 0xcc,
	0x57, 0x99, 0xf8, 0xf1, 0x7e, 0x9b, 0xd0, 0x59, 0x6e, 0x1a, 0x5c, 0xb2, 0x5c, 0xe0, 0x03, 0xb4,
	0xa7, 0x14, 0x27, 0xa9, 0x41, 0xb1, 0x5f, 0xa9, 0x45, 0x1f, 0x1b, 0xd6, 0x97, 0xe5, 0x34, 0xd0,
	0x87, 0x8e, 0x2f, 0x85, 0x81, 0x94, 0x57, 0xbc, 0xa9, 0xb0, 0xcb, 0x75, 0x0d, 0x47, 0x75, 0xbf,
	0xd7, 0xa9, 0x95, 0xa2, 0xca, 0xad, 0xec, 0xd1, 0xba, 0x12, 0xac, 0x77, 0xb0, 0xa3, 0x57, 0xa9,
	0xcc, 0x69, 0x4c, 0x2c, 0x7c, 0x86, 0x56, 0x51, 0xef, 0x3e, 0x2d, 0xbb, 0x1a, 0x7f, 0xe7, 0x4d,
	0x1a, 0xf8, 0xa2, 0xb7, 0x6b, 0x9b, 0xd7, 0xc3, 0xd1, 0xde, 0xc0, 0xde, 0xe1, 0xc4, 0x63, 0x6b,
	0x3a, 0x81, 0xeb, 0x84, 0xb9, 0x71, 0x9e, 0x7d, 0xb8, 0xf4, 0x1d, 0xae, 0xb2, 0x4f, 0xe2, 0x6e,
	0xce, 0xa4, 0x20, 0xf5, 0x80, 0x34, 0xed, 0x06, 0x6a, 0x56, 0x1e, 0xc9, 0x57, 0x2b, 0xef, 0x5b,
	0xef, 0xa7, 0x7a, 0xf7, 0xef, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x36, 0x54, 0x56, 0x5e, 0x13,
	0x03, 0x00, 0x00,
}
